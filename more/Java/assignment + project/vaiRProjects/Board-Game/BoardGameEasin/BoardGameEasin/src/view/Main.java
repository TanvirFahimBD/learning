/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import com.JDBC.JDBCManager;
import javax.swing.UIManager;

/**
 *
 * @author FURIOUS
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Start
     */
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnAdminSite = new javax.swing.JButton();
        btnPlayerSite = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(51, 102, 255));

        btnAdminSite.setBackground(new java.awt.Color(51, 102, 255));
        btnAdminSite.setText("Board game management panel");
        btnAdminSite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdminSiteActionPerformed(evt);
            }
        });

        btnPlayerSite.setBackground(new java.awt.Color(51, 102, 255));
        btnPlayerSite.setText("Player Site");
        btnPlayerSite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayerSiteActionPerformed(evt);
            }
        });

        btnExit.setBackground(new java.awt.Color(255, 0, 0));
        btnExit.setText("Exit");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(57, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnAdminSite, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                    .addComponent(btnPlayerSite, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnExit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(67, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addComponent(btnAdminSite, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnPlayerSite, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(59, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAdminSiteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdminSiteActionPerformed
        // TODO add your handling code here:
        BoardGameControlPanel bgmp = new BoardGameControlPanel();
        bgmp.setVisible(true);
        this.setVisible(false);

    }//GEN-LAST:event_btnAdminSiteActionPerformed

    private void btnPlayerSiteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayerSiteActionPerformed
        // TODO add your handling code here:
        PlayerPanel ps = new PlayerPanel();
        ps.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnPlayerSiteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
                //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdminSite;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnPlayerSite;
    // End of variables declaration//GEN-END:variables
}

class SetupDatabase {

    public SetupDatabase() {
        JDBCManager manager = new JDBCManager();
        manager.initSqliteConnection("bg.db");
        String sql = "DROP TABLE if EXISTS Player;";
        manager.dropTable(sql);
        sql = "DROP TABLE IF EXISTS game;";
        manager.dropTable(sql);
        sql = "DROP TABLE IF EXISTS GameCatagory;";
        manager.dropTable(sql);
        sql = "DROP TABLE IF EXISTS GameDesigner;";
        manager.dropTable(sql);
        sql = "DROP TABLE IF EXISTS PlayerPrefferedCatagory;";
        manager.dropTable(sql);
        sql = "DROP TABLE IF EXISTS PlayerPrefferedDesigner;";
        manager.dropTable(sql);
        sql = "DROP TABLE IF EXISTS PlayerPrefferedGame;";
        manager.dropTable(sql);
        sql = "DROP TABLE IF EXISTS bookmark;";
        manager.dropTable(sql);

        sql = "CREATE TABLE if not exists \"Game\" (\n"
                + "\"gameId\"  INTEGER NOT NULL,\n"
                + "\"gameName\"  varchar,\n"
                + "\"minPlayer\"  INTEGER,\n"
                + "\"maxPlayer\"  INTEGER,\n"
                + "\"optimalPlayer\"  INTEGER,\n"
                + "\"gameDesigner\"  INTEGER,\n"
                + "\"gameCatagory\"  INTEGER,\n"
                + "PRIMARY KEY (\"gameId\" ASC)\n"
                + ");";

        boolean flag = manager.createTable(sql);
        if (flag == true) {
            System.err.println("Table 'Game' created successfully.");
        }
        sql = "CREATE TABLE if not exists \"GameDesigner\" (\n"
                + "\"designerId\"  INTEGER NOT NULL,\n"
                + "\"designerName\"  varchar,\n"
                + "PRIMARY KEY (\"designerId\")\n"
                + ");";
        flag = manager.createTable(sql);
        if (flag == true) {
            System.err.println("Table 'GameDesigner' created successfully.");
        }
        sql = "CREATE TABLE if not exists \"GameCatagory\" (\n"
                + "\"catagoryId\"  INTEGER,\n"
                + "\"catagoryName\"  varchar,\n"
                + "PRIMARY KEY (\"catagoryId\")\n"
                + ");";
        flag = manager.createTable(sql);
        if (flag == true) {
            System.err.println("Table 'GameCatagory' created successfully.");
        }

        sql = "CREATE TABLE if not exists \"Player\" (\n"
                + "\"playerId\"  INTEGER NOT NULL,\n"
                + "\"playerName\"  varchar NOT NULL,\n"
                + "\"email\"  varchar NOT NULL,\n"
                + "\"location\"  varchar NOT NULL,\n"
                + "\"fromTime\"  varchar NOT NULL,\n"
                + "\"optimalNumber\"  Boolean NOT NULL,\n"
                + "\"toTime\"  varchar NOT NULL,\n"
                + "\"password\"  varchar NOT NULL,\n"
                + "PRIMARY KEY (\"playerId\")\n"
                + ");";
        flag = manager.createTable(sql);
        if (flag == true) {
            System.err.println("Table 'Player' created successfully.");
        }

        sql = "CREATE TABLE if not exists \"PlayerPrefferedCatagory\" (\n"
                + "\"playerId\"  INTEGER NOT NULL,\n"
                + "\"catagoryId\"  INTEGER NOT NULL,\n"
                + "PRIMARY KEY (\"playerId\", \"catagoryId\"),\n"
                + "CONSTRAINT \"fk_player_catagory_1\" FOREIGN KEY (\"playerId\") REFERENCES \"Player\" (\"playerId\"),\n"
                + "CONSTRAINT \"fk_user_catagory_2\" FOREIGN KEY (\"catagoryId\") REFERENCES \"GameCatagory\" (\"catagoryId\")\n"
                + ");";
        flag = manager.createTable(sql);
        if (flag == true) {
            System.err.println("Table 'PlayerPrefferedCatagory' created successfully.");
        }

        sql = "CREATE TABLE if not exists \"PlayerPrefferedGame\" (\n"
                + "\"playerId\"  INTEGER NOT NULL,\n"
                + "\"gameId\"  INTEGER NOT NULL,\n"
                + "PRIMARY KEY (\"playerId\", \"gameId\"),\n"
                + "CONSTRAINT \"fkid_player_game_1\" FOREIGN KEY (\"playerId\") REFERENCES \"Player\" (\"playerId\"),\n"
                + "CONSTRAINT \"fkid_player_game_2\" FOREIGN KEY (\"gameId\") REFERENCES \"game\" (\"gameId\")\n"
                + ");";
        flag = manager.createTable(sql);
        if (flag == true) {
            System.err.println("Table 'PlayerPrefferedGame' created successfully.");
        }

        sql = "CREATE TABLE if not exists \"PlayerPrefferedDesigner\" (\n"
                + "\"playerId\"  INTEGER NOT NULL,\n"
                + "\"designerId\"  INTEGER NOT NULL,\n"
                + "PRIMARY KEY (\"playerId\", \"designerId\"),\n"
                + "CONSTRAINT \"fk_player_preffered_designer_1\" FOREIGN KEY (\"playerId\") REFERENCES \"Player\" (\"playerId\"),\n"
                + "CONSTRAINT \"fk_player_preffered_designer_2\" FOREIGN KEY (\"designerId\") REFERENCES \"GameDesigner\" (\"designerId\")\n"
                + ");";
        flag = manager.createTable(sql);
        if (flag == true) {
            System.err.println("Table 'PlayerPrefferedDesigner' created successfully.");
        }

        sql = "CREATE TABLE if not exists \"bookmark\" (\n"
                + "\"bookmarkId\"  INTEGER NOT NULL,\n"
                + "\"bookmarkTitle\"  varchar NOT NULL,\n"
                + "\"bookmarkSql\"  varchar NOT NULL,\n"
                + "\"playerId\"  INTEGER NOT NULL,\n"
                + "PRIMARY KEY (\"bookmarkId\")\n"
                + ");";
        flag = manager.createTable(sql);
        if (flag == true) {
            System.err.println("Table 'PlayerPrefferedDesigner' created successfully.");
        }
    }
}
