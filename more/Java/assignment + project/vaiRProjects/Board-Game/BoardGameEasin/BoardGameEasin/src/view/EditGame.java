/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import com.JDBC.JDBCManager;
import java.awt.BorderLayout;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;

/**
 *
 * @author FURIOUS
 */
public class EditGame extends AbstractFrame {

    /**
     * Creates new form EditGame
     */
    public EditGame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblGameName = new javax.swing.JLabel();
        lblMinPlayer = new javax.swing.JLabel();
        lblMaxPlayer = new javax.swing.JLabel();
        btnUpdateGame = new javax.swing.JButton();
        lblSelectGame = new javax.swing.JLabel();
        txtMinPlayer = new javax.swing.JTextField();
        txtMaxPlayer = new javax.swing.JTextField();
        lblOptimalPlayer = new javax.swing.JLabel();
        txtOptimalPlayer = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        lblGameCatagory = new javax.swing.JLabel();
        txtGameCatagory = new javax.swing.JTextField();
        lblGameDesigner = new javax.swing.JLabel();
        txtGameDesigner = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(51, 102, 255));

        lblGameName.setText("Game name");

        lblMinPlayer.setText("Minimum player");

        lblMaxPlayer.setText("Maximum player");

        btnUpdateGame.setBackground(new java.awt.Color(51, 102, 255));
        btnUpdateGame.setText("Update game");
        btnUpdateGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateGameActionPerformed(evt);
            }
        });

        lblSelectGame.setForeground(new java.awt.Color(51, 51, 255));
        lblSelectGame.setText("Click to select game...");
        lblSelectGame.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblSelectGameMouseClicked(evt);
            }
        });

        txtMinPlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMinPlayerActionPerformed(evt);
            }
        });

        lblOptimalPlayer.setText("Optimal Player");

        txtOptimalPlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtOptimalPlayerActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(255, 51, 51));
        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        lblGameCatagory.setText("Game catagory");

        lblGameDesigner.setText("Game designer");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblMinPlayer)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtMinPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblMaxPlayer)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtMaxPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblOptimalPlayer)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtOptimalPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnUpdateGame))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(lblGameName))
                            .addComponent(lblGameCatagory)
                            .addComponent(lblGameDesigner))
                        .addGap(59, 59, 59)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblSelectGame, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                            .addComponent(txtGameCatagory)
                            .addComponent(txtGameDesigner))))
                .addContainerGap(70, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblGameName)
                    .addComponent(lblSelectGame))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblGameCatagory)
                    .addComponent(txtGameCatagory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblGameDesigner)
                    .addComponent(txtGameDesigner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtMinPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMinPlayer))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblMaxPlayer)
                    .addComponent(txtMaxPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblOptimalPlayer)
                    .addComponent(txtOptimalPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(btnUpdateGame))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lblSelectGameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblSelectGameMouseClicked
        // TODO add your handling code here:
        final JFrame frame = new JFrame();
        final DefaultListModel dlm = new DefaultListModel();
        final JList<Object> gameNameList = new JList<>();
        gameNameList.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getSource().equals(gameNameList)) {
                    String gameName = gameNameList.getSelectedValue().toString();
                    EditGame.getLblSelectGame().setText(gameName);
                    JDBCManager manager = new JDBCManager();
                    manager.initSqliteConnection("bg.db");
                    String sql = "SELECT gd.designerName, gc.catagoryName \n"
                            + "FROM GameDesigner gd, GameCatagory gc, Game g\n"
                            + "WHERE gd.designerId = g.gameDesigner\n"
                            + "AND gc.catagoryId = g.gameCatagory\n"
                            + "AND g.gameName = ?;";
                    ArrayList<HashMap<String, String>> al = manager.getQueryData(sql, gameName);
                    txtGameCatagory.setText(al.get(0).get("catagoryName"));
                    txtGameDesigner.setText(al.get(0).get("designerName"));
                    sql = "SELECT g.minPlayer FROM game g WHERE g.gameName = ?;";
                    al = manager.getQueryData(sql, gameName);
                    Integer minPlayer = Integer.parseInt(al.get(0).get("minPlayer"));
                    sql = "SELECT g.maxPlayer FROM game g where g.gameName = ?;";
                    al = manager.getQueryData(sql, gameName);
                    Integer maxPlayer = Integer.parseInt(al.get(0).get("maxPlayer"));
                    sql = "SELECT g.optimalPlayer FROM game g where g.gameName = ?;";
                    al = manager.getQueryData(sql, gameName);
                    Integer optimalPlayer = Integer.parseInt(al.get(0).get("optimalPlayer"));
                    txtMaxPlayer.setText(maxPlayer.toString());
                    txtMinPlayer.setText(minPlayer.toString());
                    txtOptimalPlayer.setText(optimalPlayer.toString());
                    frame.dispose();
                }
            }

            @Override
            public void mousePressed(MouseEvent e) {
            }

            @Override
            public void mouseReleased(MouseEvent e) {
            }

            @Override
            public void mouseEntered(MouseEvent e) {
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }
        });
        gameNameList.setModel(dlm);
        JDBCManager manager = new JDBCManager();
        String sql = "SELECT g.gameName FROM game g;";
        manager.initSqliteConnection("bg.db");
        ArrayList<HashMap<String, String>> al = manager.getQueryData(sql);
        for (int i = 0; i < al.size(); i++) {
            dlm.addElement(al.get(i).get("gameName"));
        }
        JScrollPane jscp = new JScrollPane(gameNameList);
        frame.setSize(300, 450);
        frame.setLayout(new BorderLayout());
        frame.add(jscp, BorderLayout.CENTER);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setVisible(true);
        frame.repaint();
    }//GEN-LAST:event_lblSelectGameMouseClicked

    private void btnUpdateGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateGameActionPerformed
        // TODO add your handling code here:
        try {
            Integer minPlayer = Integer.parseInt(txtMinPlayer.getText());
            Integer maxPlayer = Integer.parseInt(txtMaxPlayer.getText());
            Integer optimalPlayer = Integer.parseInt(txtOptimalPlayer.getText());
            String gameName = lblSelectGame.getText();
            JDBCManager manager = new JDBCManager();
            manager.initSqliteConnection("bg.db");
            String sql = "UPDATE game SET maxPlayer = ? WHERE gameName = ?;";
            manager.updateData(sql, maxPlayer, gameName);
            sql = "UPDATE game SET minPlayer = ? WHERE gameName = ?;";
            manager.updateData(sql, minPlayer, gameName);
            sql = "UPDATE game SET optimalPlayer = ? WHERE gameName = ?;";
            boolean flag = manager.updateData(sql, optimalPlayer, gameName);
            if (flag == true) {
                JOptionPane.showMessageDialog(this, "All data updated successfully.");
            }
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(this, "Invalid data.");
        }


    }//GEN-LAST:event_btnUpdateGameActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        BoardGameControlPanel s = new BoardGameControlPanel();
        s.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtOptimalPlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtOptimalPlayerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOptimalPlayerActionPerformed

    private void txtMinPlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMinPlayerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMinPlayerActionPerformed

    public static JLabel getLblSelectGame() {
        return lblSelectGame;
    }

//    public static void main(String[] args) {
//        EditGame eg = new EditGame();
//        eg.setVisible(true);
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnUpdateGame;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel lblGameCatagory;
    private javax.swing.JLabel lblGameDesigner;
    private javax.swing.JLabel lblGameName;
    private javax.swing.JLabel lblMaxPlayer;
    private javax.swing.JLabel lblMinPlayer;
    private javax.swing.JLabel lblOptimalPlayer;
    private static javax.swing.JLabel lblSelectGame;
    private javax.swing.JTextField txtGameCatagory;
    private javax.swing.JTextField txtGameDesigner;
    private javax.swing.JTextField txtMaxPlayer;
    private javax.swing.JTextField txtMinPlayer;
    private javax.swing.JTextField txtOptimalPlayer;
    // End of variables declaration//GEN-END:variables
}
